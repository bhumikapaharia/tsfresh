---
name: Test
on:
  pull_request:
  push:
    branches:
      - main

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ 3.8]
        installation: ["highest"]


    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}-${{ hashFiles('test-requirements.txt') }}-${{ matrix.python-version }}-${{ matrix.installation }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}-${{ hashFiles('test-requirements.txt') }}-${{ matrix.python-version }}-${{ matrix.installation }}

      - name: Install dependencies
        run: |
          # Do all the installations
          python -m pip install --upgrade pip wheel setuptools

          # Now downgrade packages if required by environment variables
          [ -z "${{matrix.NUMPY}}" ] || pip install numpy==${{matrix.NUMPY}}
          [ -z "${{matrix.PANDAS}}" ] || pip install pandas==${{matrix.PANDAS}}
          [ -z "${{matrix.SCIKITLEARN}}" ] || pip install scikit-learn==${{matrix.SCIKITLEARN}}
          [ -z "${{matrix.STATSMODELS}}" ] || pip install statsmodels==${{matrix.STATSMODELS}}
          [ -z "${{matrix.DASK}}" ] || pip install dask==${{matrix.DASK}}
          [ -z "${{matrix.DISTRIBUTED}}" ] || pip install distributed==${{matrix.DISTRIBUTED}}
          # need to downgrade tornado manually
          [ -z "${{matrix.SCIPY}}" ] || pip install scipy==${{matrix.SCIPY}}

          pip install -r requirements.txt -r test-requirements.txt
          pip install .

          # Print out the pip versions for debugging
          pip list

      - name: Test with pytest
        run: |
          pytest --junitxml=junit/test-results-${{ matrix.python-version }}-${{ matrix.installation }}.xml --cov-report=xml tests

      - name: Upload pytest test results
        uses: actions/upload-artifact@v1
        with:
          name: pytest-results-${{ matrix.python-version }}-${{ matrix.installation }}
          path: junit/test-results-${{ matrix.python-version }}-${{ matrix.installation }}.xml
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1


  armv64_job:
      name: Build and Test for arm64
      runs-on: ubuntu-20.04
      steps:
        - uses: actions/checkout@v2
        - name: Set up QEMU
          id: qemu
          uses: docker/setup-qemu-action@v1
        - name: Install and Run tests
          run: |
            docker run --rm -v ${{ github.workspace }}:/ws:rw --workdir=/ws \
              arm64v8/ubuntu:20.04 \
              bash -exc 'apt-get update && apt-get -y install python3 python3-pip python3-venv curl git && \
              ln -fs /usr/share/zoneinfo/America/New_York /etc/localtime && export DEBIAN_FRONTEND=noninteractive && apt-get install -y tzdata && dpkg-reconfigure --frontend noninteractive tzdata && \
              python3 -m pip install --upgrade pip wheel setuptools && \
              pip3 install numpy pandas scikit-learn statsmodels dask[dataframe] distributed scipy requests patsy psutil tqdm matrixprofile stumpy cloudpickle Sphinx docutils b2luigi sphinx_rtd_theme && \
              pip3 install -r test-requirements.txt && \
              pytest --junitxml=junit/test-results-3.8-highest.xml --cov-report=xml tests'
